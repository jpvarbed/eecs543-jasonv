SETUP: load auxfns.lisp and kenken.cl

	**Each of our four print-solutions test were run with first-ambiguous,
	  mrv-ambiguous, and extended-consistency. We were sure that each 
  	  resulted in the same puzzle solutions.

========================================================================
Test 1: print-solutions test

	Commands:
		(setf 2puz (CREATE-PUZZLE 2 '((3 + ((1 1) (1 2))) (1 + ((2 1))) (2 + ((2 2))))))
		
		(print-solutions 2puz)

	Expected:   12
 		   ----
		  2|21|
		  3|12|
		   ----
========================================================================


========================================================================
Test 2: print-solutions test

	Commands:
		(setf 3puz (create-puzzle 3 '((6 + ((1 1) (2 1) (3 1)))
                                          (6 * ((1 2) (1 3) (2 3)))
                                          (3 + ((2 2)))
                                          (1 - ((3 2) (3 3))))))

		(print-solutions 3puz)

	Expected:
		  123
		 -----
		2|123|
		3|231|
		4|312|
		 -----

		  123
		 -----
		2|213|
		3|132|
		4|321|
		 -----
========================================================================


========================================================================
Test 3: print-solutions test

	Commands:
		(setf 5puz (create-puzzle 5 '((10 + ((1 1) (1 2) (1 3) (1 4)))
                                            (10 + ((1 5) (2 5) (3 5)))
                                            (10 + ((2 1) (2 2) (3 1)))
                                            (10 * ((2 3) (2 4) (3 4)))
                                            (10 + ((3 2) (3 3) (4 2)))
                                            (10 + ((4 1) (5 1) (5 2)))
                                            (10 + ((4 3) (5 3) (5 4) (5 5)))
                                            (10 * ((4 4) (4 5))))))

		(print-solutions 5puz)

	Expected:
		  12345
		 -------
		2|21435|
		3|32514|
		4|54321|
		5|43152|
		6|15243|
		 -------
========================================================================


========================================================================
Test 4: print-solutions test

	Commands:
		(SETF 6PUZ (CREATE-PUZZLE 6
        		'((80 * ((1 1) (1 2) (2 1))) (3 + ((1 3))) (5 - ((1 4) (1 5)))
	                 (2 / ((1 6) (2 6))) (11 + ((2 2) (2 3))) (1 - ((2 4) (2 5)))
	                 (9 * ((3 1) (4 1) (4 2))) (2 + ((3 2))) (3 - ((3 3) (3 4)))
	                 (30 * ((3 5) (3 6))) (11 + ((4 3) (4 4))) (2 / ((4 5) (4 6)))
	                 (6 + ((5 1))) (10 * ((6 1) (6 2))) (8 * ((5 2) (5 3) (6 3)))
	                 (13 + ((5 4) (6 4) (5 5))) (1 + ((6 5))) (8 + ((5 6) (6 6))))))
		
		(print-solutions 6puz)

	Expected:
		 123456
		 --------
		2|543162|
		3|465231|
		4|321456|
		5|136524|
		6|612345|
		7|254613|
		 --------
========================================================================


========================================================================
Test 5: test puzzle error checking

	Commands:
		(setf 3puz (create-puzzle 3 '((6 + ((1 1) (2 1) (3 1)))
                                          (6 * ((1 2) (1 3) (2 3)))
                                          (3 + ((2 2)))
                                          (1 - ((3 2) (3 2))))))

		(setf 3puz (create-puzzle 3 '((6 + ((1 1) (2 1) (3 1)))
                                          (6 * ((1 2) (1 3) (2 3)))
                                          (3 + ((2 2)))
                                          (1 - ((3 2) (3 4))))))

		(setf 3puz (create-puzzle 3 '((6 + ((1 1) (2 1) (3 1)))
                                          (6 * ((1 2) (1 3) (2 3)))
                                          (3 + ((2 2)))
                                          (A - ((3 2) (3 3))))))

		(setf 3puz (create-puzzle 3 '((6 + ((1 1) (2 1) (3 1)))
                                          (6 * ((1 2) (1 3) (2 3)))
                                          (3 + ((2 2)))
                                          (1 y ((3 2) (3 3))))))

	Expected: all of the above commands should result in an error message
		  stating the puzzle could not be created.
========================================================================


========================================================================
Test 6: test mrv-ambiguous

	Commands:
		(SETF 3PUZ (CREATE-PUZZLE 3 '((6 + ((1 1) (2 1) (3 1))) 
					(6 * ((1 2) (1 3) (2 3))) 
					(3 + ((2 2))) 
					(1 - ((3 2) (3 3))))))
		
		(SETF (CELL-DOMAIN (CELL-AT 3PUZ 2 3)) '(1 2))

		(MRV-AMBIGUOUS 3PUZ)

	Expected:
		(2 3)
========================================================================


========================================================================	
Test 7: test extended-consistency

	Commands:
		(setf 4puz (create-puzzle 4 '((4 + ((1 1) (1 2))) 
					(2 / ((1 3) (1 4))) (2 + ((2 1)))
					(1 - ((2 2) (2 3))) (6 * ((2 4) (3 3) (3 4))) 
					(3 - ((3 1) (3 2))) (2 / ((4 1) (4 2))) 
					(2 - ((4 3) (4 4))))))

		(EVERY #'(LAMBDA (CELL) (PROPAGATE-CONSTRAINTS CELL 4PUZ nil)) (ENUMERATE-CELLS 4PUZ))

		(show-puzzle 4puz)



		(setf 4puz (create-puzzle 4 '((4 + ((1 1) (1 2))) 
					(2 / ((1 3) (1 4))) (2 + ((2 1)))
					(1 - ((2 2) (2 3))) (6 * ((2 4) (3 3) (3 4))) 
					(3 - ((3 1) (3 2))) (2 / ((4 1) (4 2))) 
					(2 - ((4 3) (4 4))))))

		(EVERY #'(LAMBDA (CELL) (PROPAGATE-CONSTRAINTS CELL 4PUZ t) (ENUMERATE-CELLS 4PUZ))

		(show-puzzle 4puz)

	Expected:
		  1234
		 ------
		2|....|
		3|2...|
		4|....|
		5|....|
		 ------

		  1234
		 ------
		2|....|
		3|2...|
		4|....|
		5|.2..|
		 ------
========================================================================	